@page "/Admin/Products/Edit/{ProductId:int}"
@inject NavigationManager NavigationManager
@inject IProductsDataAccess ProductDataAccess
@inject ICategoryDataAccess CategoryDataAccess

<h3>Edit Product</h3>

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="productCode">ProductCode:</label>
            <InputText id="productCode" @bind-Value="product.ProductCode"/>
        </div>
        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="product.Name" />
        </div>
        <div>
            <label for="quantity">Quantity:</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" />
        </div>
        <div>
            <label for="price">Price:</label>
            <InputNumber id="price" @bind-Value="product.Price" />
        </div>
        <div>
            <label for="categoryId">Category ID:</label>
            <InputNumber id="categoryId" @bind-Value="product.CategoryID"/>
        </div>

        <button type="button" class="btn btn-danger" @onclick="() => GoBack()">Cancel</button>
        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;

    protected override void OnInitialized() => product = ProductDataAccess.GetProduct(ProductId);

    private void HandleValidSubmit()
    {
        if(product!.ProductCode.Length > 3)
		{
			product.ProductCode = product.ProductCode.Substring(0, 3);
		}

		Category? category = CategoryDataAccess.GetCategory(product.CategoryID);
        if(category == null)
		{
			product.CategoryID = 1;
		}

        ProductDataAccess.UpdateProduct(product!);
        NavigationManager.NavigateTo("/Admin/Products");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/Admin/Products");
    }
}
