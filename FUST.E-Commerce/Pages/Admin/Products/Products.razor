@page "/Admin/Products"
@inject NavigationManager NavigationManager
@inject IProductsDataAccess ProductDataAccess

<h3>Products</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Product ID</th>
            <th>Product Code</th>
            <th>Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.ProductID</td>
                <td>@product.ProductCode</td>
                <td>@product.Name</td>
                <td>@product.Quantity</td>
                <td>@product.Price €</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditProduct(product.ProductID)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductID)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateProduct">Create New Product</button>
</div>

@code {
    private IEnumerable<Product> products = [];

    protected override void OnInitialized()
    {
        products = ProductDataAccess.GetProducts();
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/Admin/Products/Create");
    }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/Admin/Products/Edit/" + productId);
    }

    private void DeleteProduct(int productId)
    {
        ProductDataAccess.DeleteProduct(productId);
        products = ProductDataAccess.GetProducts();
    }

}